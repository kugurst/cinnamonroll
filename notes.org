#+TITLE:  State of Cinnamonroll
#+AUTHOR: Mark Aligbe
#+EMAIL:  i.am@markaligbe.com
#+LANGUAGE: en
#+STARTUP: showall

* Configuration Notes
  + See =config/application.rb= to add =PasswordHash.rb= to the list of files to load
  + See =config/environments/development.rb= to set the networks allowed to access the web console
  + See =app/controllers/application_controller.rb= to set files that will be reloaded when changed.
  + See =config/boot.rb= to change the =rails server= bind address.
  + See =app/controllers/application_controller.rb= to configure what happens when not permitted parameters are encounterd  =ActionController::Parameters.action_on_unpermitted_parameters = false=

* Things to avoid
  + Text in the session only

* Practices
  + Place precompiled javascript files in =public/js=
    + Include these files by referencing =/js/*=
  + Use rails conventions. Stick all static files under public. Tree out directory according to controller if relevant

* Security
** Encryption Scheme
   + The client makes the RSA key.
   + The client sends a request.
     + If the client doesn't have an AES key, it sends a request to the server
   + The client decrypts the AES key using its private key, and then encrypts using the key and random IV.
   + Duplex communication is formed by server and client generating their own IV per communication.

* Posts
** Loading Scheme
   + A directory watcher monitors file changes, and creates a post object for any added files
   + A directory watcher monitors file additions, and expires the cache for a given object

* TODO List
***** DONE Investigate the viability of Turbolinks or Turbograft to facilitate page replacement
   - Using Turbolink's default behaviour. Some CoffeeScript was added in =posts.coffee= to normalize weirdness when navigating through history
** =encrypt.coffee=
***** DONE Add that we are not encrypting to the =sessionStorage= (=cinnamonroll.sec.NO_ENCRYPTION= should go in =sessionStorage=)
***** TODO Check to see if =cinnamonroll.sec.NO_ENCRYPTION= is true before attempting to request an AES key (prevents clients that can't generate a key from repeatedly generating an RSA key)
***** TODO refactor the static code portion
***** DONE dynamically add =enc_*= fields to forms so as not to screw up the actual forms on submission
***** DONE set encryption to false if HTTPS is active
***** TODO implement encryption of data sent to the client
** =comments_controller.rb=
***** DONE Get the AES key from the session, not params
** =user.coffee= | =session.coffee=
***** DONE implement client side password validation (minimum length)
****** DONE display a warning telling the user that we think their password is weak
***** TODO implement maximum password tries per second
** =Post=
***** DONE implement comment showing as a partial
***** DONE implement body showing as a partial
***** TODO implement caching for comments
** =static_controller.rb=
***** TODO implement caching for the posts displayed on the main page and on category pages
      - First, investigate if there's a speed up
** =users=
***** DONE implement a before_destroy callback that sets all comments to deleted
** =comments=
** =application.rb=
***** DONE remove sprockets from development
      - This will allow us to use per controller styles and coffee more easily, but without needing to do a require-tree and thus possibly clobbering files
***** TODO make encrypt seamless by adding a before_action to decrypt all params
      - It adds a burden to those designing controllers, and the behaviour is consistent in currently implemented controllers
** =routes.rb=
***** DONE Shorten the post pages path by removing post and sticking them in the category loop
** configuration
***** DONE change =redis.conf= in production to use a socket.
      + Need to trickle changes to sidekiq and cinnamonroll proper as well
***** DONE push comment sorting to mongoid by ordering the comments from the controller
